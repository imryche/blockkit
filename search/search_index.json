{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BlockKit for Python","text":"<p>You know what you want to build. A simple approval button. A form that collects feedback. A nice home tab.</p> <p>But then you open docs and see this:</p> <pre><code>{\n  \"type\": \"section\",\n  \"text\": {\n    \"type\": \"mrkdwn\",\n    \"text\": \"...\"\n  }\n}\n</code></pre> <p>Three levels deep just to show text. And that's the easy part.</p> <p>BlockKit fixes this. Write Python. Get perfect JSON. Ship faster.</p>"},{"location":"#what-is-this","title":"What is this?","text":"<p>BlockKit for Python is a library that makes building Slack UIs actually enjoyable. Type hints tell you what's possible. Method chaining lets you build naturally. Validation catches mistakes before Slack does. Zero dependencies means it won't break your project.</p>"},{"location":"#install-it","title":"Install it","text":"<pre><code>pip install blockkit\n</code></pre>"},{"location":"#see-the-difference","title":"See the difference","text":"<p>Here's how most people build Slack messages:</p> <pre><code>{\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"Hello from BlockKit!\"\n      },\n      \"accessory\": {\n        \"type\": \"button\",\n        \"text\": {\n          \"type\": \"plain_text\",\n          \"text\": \"Click me\"\n        },\n        \"action_id\": \"button_1\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Here's how you do it with BlockKit:</p> <pre><code>from blockkit import Message, Section, Button\n\nmessage = (\n    Message()\n    .add_block(\n        Section(\"Hello from BlockKit!\")\n        .accessory(Button(\"Click me\").action_id(\"button_1\"))\n    )\n    .build()\n)\n</code></pre> <p>Same result. Half the code. No guessing.</p>"},{"location":"#the-basics","title":"The basics","text":""},{"location":"#everything-chains","title":"Everything chains","text":"<p>Start with what you want. Add what you need. Build when you're done.</p> <pre><code>button = (\n    Button(\"Save\")\n    .action_id(\"save_button\")\n    .style(Button.PRIMARY)\n    .build()\n)\n</code></pre>"},{"location":"#it-knows-what-you-mean","title":"It knows what you mean","text":"<p>Write text. We'll figure out if it needs markdown.</p> <pre><code># Just text? We use plain_text\nSection(\"Hello world\")\n\n# See markdown? We switch to mrkdwn\nSection(\"Hello *world*\")\n</code></pre>"},{"location":"#mistakes-get-caught-early","title":"Mistakes get caught early","text":"<p>Forget a required field? We'll tell you before Slack does.</p> <pre><code># This fails immediately - confirms need a deny button\n\nButton(\"Delete\").confirm(\n    Confirm()\n    .title(\"Are you sure?\")\n    .text(\"This cannot be undone\")\n    .confirm(\"Yes, delete it\")\n    # Missing: .deny(\"Cancel\")\n).build()\n</code></pre>"},{"location":"#rules-are-built-in","title":"Rules are built in","text":"<p>Slack has rules. Lots of them. Button text can't be too long. Sections can't have too many fields. We enforce all of them.</p> <pre><code># This raises an error - button text has a 75 character limit\nButton(\"This is way too long \" * 10).build()\n</code></pre> <p>The library helps you follow the rules. You ship working code.</p>"},{"location":"#real-examples","title":"Real examples","text":""},{"location":"#a-message-with-buttons","title":"A message with buttons","text":"<pre><code>from blockkit import Message, Section, Actions, Button\n\nmessage = (\n    Message()\n    .add_block(Section(\"Your order has been shipped!\"))\n    .add_block(\n        Actions()\n        .add_element(Button(\"Track Package\").action_id(\"track\"))\n        .add_element(Button(\"View Details\").action_id(\"details\"))\n    )\n    .build()\n)\n</code></pre>"},{"location":"#a-form-that-works","title":"A form that works","text":"<pre><code>from blockkit import Modal, Input, PlainTextInput, Checkboxes, Option\n\nmodal = (\n    Modal()\n    .title(\"Create Task\")\n    .add_block(\n        Input(\"Task Name\").element(PlainTextInput().action_id(\"task_name\"))\n    )\n    .add_block(\n        Input(\"Assignees\").element(\n            Checkboxes()\n            .action_id(\"assignees\")\n            .add_option(Option(\"Alice\", \"U123\"))\n            .add_option(Option(\"Bob\", \"U456\"))\n        )\n    )\n    .submit(\"Create\")\n    .build()\n)\n</code></pre>"},{"location":"#rich-text-that-makes-sense","title":"Rich text that makes sense","text":"<pre><code>from blockkit import RichText, RichTextSection, RichTextEl, RichStyle\n\nrich_text = (\n    RichText()\n    .add_element(\n        RichTextSection()\n        .add_element(RichTextEl(\"Important: \").style(RichStyle().bold()))\n        .add_element(RichTextEl(\"Please review the following changes\"))\n    )\n    .build()\n)\n</code></pre>"},{"location":"#a-home-tab-users-will-see","title":"A home tab users will see","text":"<pre><code>from blockkit import Home, Header, Section, Divider, Context, ImageEl, Text\n\nhome = (\n    Home()\n    .add_block(Header(\"Welcome back!\"))\n    .add_block(Section(\"Here's what's happening today:\"))\n    .add_block(Divider())\n    .add_block(\n        Section(\"**5 new messages**\").accessory(\n            Button(\"View All\").action_id(\"view_messages\")\n        )\n    )\n    .add_block(\n        Context()\n        .add_element(ImageEl(\"https://example.com/icon.png\", \"icon\"))\n        .add_element(Text(\"Last updated 5 minutes ago\"))\n    )\n    .build()\n)\n</code></pre>"},{"location":"#how-it-fits-together","title":"How it fits together","text":"<p>Every Slack UI has the same structure:</p> <ol> <li>Surfaces - The container (Message, Modal, Home)</li> <li>Blocks - The layout (Section, Actions, Input)</li> <li>Elements - The interactive bits (Button, Select, Checkboxes)</li> <li>Composition - The details (Text, Option, Confirm)</li> </ol> <p>Build from the outside in. Start with a surface. Add blocks. Fill with elements.</p>"},{"location":"#license","title":"License","text":"<p>MIT. Use it however you want.</p>"},{"location":"beyond/","title":"Beyond basics","text":"<p>You've built your first message. Now what?</p> <p>Let's build bigger. Start simple. Add complexity only when you need it. The library grows with your needs.</p>"},{"location":"beyond/#start-with-messages","title":"Start with messages","text":"<p>Every Slack UI starts here. A message in a channel. Nothing fancy.</p> <pre><code>from blockkit import Message, Section\n\nmessage = Message().add_block(Section(\"New support ticket #1247\")).build()\n</code></pre> <p>One line of information. That's often enough.</p>"},{"location":"beyond/#add-some-context","title":"Add some context","text":"<p>Users need details. Who reported this? When? How urgent?</p> <pre><code>from blockkit import Context, Message, Section, Text\n\nmessage = (\n    Message()\n    .add_block(Section(\"New support ticket #1247\"))\n    .add_block(\n        Context().add_element(\n            Text(\"Reported by Alice \u2022 High priority \u2022 2 minutes ago\")\n        )\n    )\n    .build()\n)\n</code></pre> <p>Now they know what, who, and when.</p>"},{"location":"beyond/#make-it-actionable","title":"Make it actionable","text":"<p>Information is good. But let's add actions to it.</p> <pre><code>from blockkit import Actions, Button, Context, Message, Section, Text\n\nmessage = (\n    Message()\n    .add_block(Section(\"New support ticket #1247\"))\n    .add_block(\n        Context().add_element(\n            Text(\"Reported by Alice \u2022 High priority \u2022 2 minutes ago\")\n        )\n    )\n    .add_block(\n        Actions()\n        .add_element(Button(\"Assign to me\").action_id(\"assign\"))\n        .add_element(Button(\"View Details\").action_id(\"details\"))\n    )\n    .build()\n)\n</code></pre> <p>Now they can do something about it.</p>"},{"location":"beyond/#when-things-can-go-wrong","title":"When things can go wrong","text":"<p>Some actions are final. Help them think twice.</p> <pre><code>from blockkit import Actions, Button, Confirm, Context, Message, Section, Text\n\nmessage = (\n    Message()\n    .add_block(Section(\"New support ticket #1247\"))\n    .add_block(\n        Context().add_element(\n            Text(\"Reported by Alice \u2022 High priority \u2022 2 minutes ago\")\n        )\n    )\n    .add_block(\n        Actions()\n        .add_element(Button(\"Assign to me\").action_id(\"assign\"))\n        .add_element(Button(\"View Details\").action_id(\"details\"))\n        .add_element(\n            Button(\"Close Ticket\")\n            .action_id(\"close\")\n            .style(Button.DANGER)\n            .confirm(\n                Confirm()\n                .title(\"Close this ticket?\")\n                .text(\n                    \"The customer will be notified that their issue is resolved\"\n                )\n                .confirm(\"Yes, close it\")\n                .deny(\"Keep it open\")\n            )\n        )\n    )\n    .build()\n)\n</code></pre> <p>The library makes confirmations simple.</p>"},{"location":"beyond/#collect-information-with-modals","title":"Collect information with modals","text":"<p>Messages are great for showing information. Modals are better for collecting it.</p> <p>Start simple:</p> <pre><code>from blockkit import Input, Modal, PlainTextInput\n\nmodal = (\n    Modal()\n    .title(\"Create Support Ticket\")\n    .add_block(\n        Input(\"Describe the issue\").element(\n            PlainTextInput().action_id(\"description\")\n        )\n    )\n    .submit(\"Create Ticket\")\n    .build()\n)\n</code></pre> <p>One question. One input. One submit button.</p>"},{"location":"beyond/#add-structure-to-your-forms","title":"Add structure to your forms","text":"<p>Real forms need multiple fields. Different types of input.</p> <pre><code>from blockkit import Checkboxes, Input, Modal, Option, PlainTextInput, StaticSelect\n\nmodal = (\n    Modal()\n    .title(\"Create Support Ticket\")\n    .add_block(\n        Input(\"Describe the issue\").element(\n            PlainTextInput().multiline().action_id(\"description\")\n        )\n    )\n    .add_block(\n        Input(\"Priority\").element(\n            StaticSelect()\n            .add_option(Option(\"Low\", \"low\"))\n            .add_option(Option(\"Medium\", \"medium\"))\n            .add_option(Option(\"High\", \"high\"))\n            .action_id(\"priority\")\n        )\n    )\n    .add_block(\n        Input(\"Category\").element(\n            Checkboxes()\n            .add_option(Option(\"Bug Report\", \"bug\"))\n            .add_option(Option(\"Feature Request\", \"feature\"))\n            .add_option(Option(\"Account Issue\", \"account\"))\n            .action_id(\"category\")\n        )\n    )\n    .submit(\"Create Ticket\")\n    .build()\n)\n</code></pre> <p>Now you have a proper form with multiple input types working together.</p>"},{"location":"beyond/#build-rich-app-homes","title":"Build rich app homes","text":"<p>App homes are different from messages and modals. They're persistent spaces that people can always always return to.</p> <p>Start with the essentials:</p> <pre><code>from blockkit import Divider, Header, Home\n\nhome = (\n    Home()\n    .add_block(Header(\"Support Dashboard\"))\n    .add_block(Section(\"Your team's tickets:\"))\n    .add_block(Divider())\n    .build()\n)\n</code></pre> <p>Header. Introduction. Visual separation.</p>"},{"location":"beyond/#add-dynamic-content","title":"Add dynamic content","text":"<p>App homes should feel alive. Show current information.</p> <pre><code>from blockkit import Button, Context, Divider, Header, Home, Section, Text\n\nhome = (\n    Home()\n    .add_block(Header(\"Support Dashboard\"))\n    .add_block(Section(\"Your team's tickets:\"))\n    .add_block(Divider())\n    .add_block(\n        Section(\"*12 open tickets*\").accessory(\n            Button(\"View All\").action_id(\"view_all\")\n        )\n    )\n    .add_block(\n        Section(\"*3 high priority*\").accessory(\n            Button(\"Review Now\").action_id(\"high_priority\")\n        )\n    )\n    .add_block(Section(\"*Average response time: 2.4 hours*\"))\n    .add_block(Divider())\n    .add_block(Context().add_element(Text(\"Last updated 5 minutes ago\")))\n    .build()\n)\n</code></pre> <p>Now people can see what's happening, take action on what matters, and know when the information was last updated.</p>"},{"location":"beyond/#the-pattern","title":"The pattern","text":"<p>Notice what happened? We started simple and added complexity:</p> <ol> <li>Ticket notification \u2192 Notification with context \u2192 Notification with    actions</li> <li>Simple ticket form \u2192 Complex form with multiple inputs</li> <li>Basic dashboard \u2192 Live support metrics</li> </ol> <p>Each step added more complexity, but the library guided you through it with the same consistent patterns.</p>"},{"location":"beyond/#why-this-works","title":"Why this works","text":"<p>The library doesn't fight you. It helps you:</p> <ul> <li>Start small - One section, one button, one field</li> <li>Add incrementally - New blocks, more elements, richer interations</li> <li>Stay consistent - Same patterns, same methods, same validation</li> </ul> <p>You write Python. We handle JSON. Slack handles the rest.</p>"},{"location":"beyond/#whats-next","title":"What's next","text":"<p>You know how to build. Now go build your own Slack UIs. The library will guide you through the complexity. Good luck!</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Skip the theory. Let's build something real and see it work in Slack.</p> <p>Here's a complete Slack message. Built in BlockKit. Sent to a channel. Done in 5 minutes.</p>"},{"location":"quickstart/#install-it","title":"Install it","text":"<pre><code>pip install blockkit\n</code></pre>"},{"location":"quickstart/#build-a-message","title":"Build a message","text":"<pre><code>from blockkit import Message, Section, Actions, Button\n\nmessage = (\n    Message()\n    .add_block(Section(\"Your deployment to production is complete.\"))\n    .add_block(\n        Actions().add_element(Button(\"View Logs\").action_id(\"view_logs\"))\n    )\n    .build()\n)\n</code></pre> <p>That's it. Real Slack BlockKit JSON. Ready to send.</p> <p>Wondering what it looks like now in Slack? You can check your exact message in the Slack block kit builder before sending it;</p> <pre><code>message.builder_url()\n</code></pre>"},{"location":"quickstart/#send-it","title":"Send it","text":"<pre><code>from slack_sdk.web import WebClient\n\nclient = WebClient(\"your-token\")\n\nclient.chat_postMessage(channel=\"#deployments\", **message)\n</code></pre>"},{"location":"quickstart/#it-works","title":"It works","text":"<p>Your message appears in Slack. The buttons work. No JSON debugging. No \"invalid block\" errors. No wondering if you got the structure right.</p>"},{"location":"quickstart/#make-it-yours","title":"Make it yours","text":"<p>Change the message:</p> <pre><code>Section(\"\ud83d\ude80 Version 2.1.4 deployed successfully to production.\")\n</code></pre> <p>Add more actions:</p> <pre><code>Actions()\n.add_element(Button(\"View Logs\").action_id(\"view_logs\"))\n.add_element(Button(\"Monitor\").action_id(\"monitor\"))\n.add_element(Button(\"Rollback\").action_id(\"rollback\").style(Button.DANGER))\n</code></pre> <p>Add a confirmation to that rollback button:</p> <pre><code>Button(\"Rollback\").action_id(\"rollback\").style(Button.DANGER).confirm(\n    Confirm()\n    .title(\"Rollback to previous version?\")\n    .text(\"This will revert all changes from the current deployment\")\n    .confirm(\"Yes, rollback\")\n    .deny(\"Cancel\")\n)\n</code></pre>"},{"location":"quickstart/#what-just-happened","title":"What just happened","text":"<p>You built a Slack message without touching JSON. The library:</p> <ul> <li>Figured out text formatting automatically</li> <li>Guided you with autocompletion in your editor</li> <li>Validated everything against Slack's rules before you sent it</li> <li>Made sure required fields weren't missing</li> </ul>"},{"location":"quickstart/#whats-next","title":"What's next","text":"<p>That's a real Slack message. Built in Python. Sent to your channel. Working buttons included.</p> <p>Ready to build something bigger? Explore all the building blocks you can use.</p>"},{"location":"releases/","title":"Releases","text":""},{"location":"releases/#v212-sep-28-2025","title":"v2.1.2 (Sep 28, 2025)","text":""},{"location":"releases/#added","title":"Added","text":"<ul> <li>Support for <code>Table</code> block.   #122.</li> <li><code>builder_url()</code> method for generating preview URLs.   #123.</li> </ul>"},{"location":"releases/#v204-jul-1-2025","title":"v2.0.4 (Jul 1, 2025)","text":""},{"location":"releases/#fixed","title":"Fixed","text":"<ul> <li>Fix the validation logic of the <code>Section</code> component's fields   #119.</li> </ul>"},{"location":"releases/#v203-june-21-2025","title":"v2.0.3 (June 21, 2025)","text":""},{"location":"releases/#fixed_1","title":"Fixed","text":"<ul> <li>Improve markdown detection in <code>is_md</code>.</li> </ul>"},{"location":"releases/#v202-june-13-2025","title":"v2.0.2 (June 13, 2025)","text":""},{"location":"releases/#fixed_2","title":"Fixed","text":"<ul> <li>Now <code>DatetimePicker.initial_date_time</code> accepts integers or datetime objects.</li> </ul>"},{"location":"releases/#v201-june-10-2025","title":"v2.0.1 (June 10, 2025)","text":""},{"location":"releases/#fixed_3","title":"Fixed","text":"<ul> <li>Added <code>py.typed</code> for the type checking support.</li> </ul>"},{"location":"releases/#v200-june-4-2025","title":"v2.0.0 (June 4, 2025)","text":"<p>We're excited to announce BlockKit v2.0.0 - a complete ground-up rewrite that makes building Slack UIs faster, more intuitive, and more enjoyable than ever before.</p>"},{"location":"releases/#whats-new","title":"What's new","text":""},{"location":"releases/#zero-dependencies","title":"Zero dependencies","text":"<p>BlockKit v2.0.0 has zero runtime dependencies. We've removed the Pydantic and built a custom validation system that's more focused on Block Kit's specific needs.</p>"},{"location":"releases/#method-chaining","title":"Method chaining","text":"<p>Every component now supports full method chaining for a more natural building experience:</p> <pre><code># v1.9.2\nbutton = Button(\n    text=PlainText(text=\"Click me\"),\n    action_id=\"button_action\",\n    style=\"primary\"\n)\n\n# v2.0.0 - Much cleaner!\nbutton = (\n    Button()\n    .text(\"Click me\")\n    .action_id(\"button_action\")\n    .style(Button.PRIMARY)\n)\n</code></pre>"},{"location":"releases/#automatic-text-type-detection","title":"Automatic text type detection","text":"<p>No more guessing whether to use <code>plain_text</code> or <code>mrkdwn</code>. BlockKit now automatically detects markdown formatting:</p> <pre><code># Automatically uses plain_text\nSection(\"Hello world\")\n\n# Automatically detects markdown and uses mrkdwn\nSection(\"Hello *world*\")\n</code></pre>"},{"location":"releases/#intelligent-string-conversion","title":"Intelligent string conversion","text":"<p>Pass strings anywhere - BlockKit automatically converts them to the appropriate Text objects:</p> <pre><code># All of these work seamlessly\nModal().title(\"My Modal\")\nButton().text(\"Click me\")\nSection(\"*Bold text*\")\n</code></pre>"},{"location":"releases/#complete-coverage","title":"Complete coverage","text":"<p>The library now supports all blocks, elements and composition objects that are currently available in Block Kit.</p>"},{"location":"releases/#better-error-messages","title":"Better error messages","text":"<pre><code># Clear, actionable validation errors\nFieldValidationError: Field 'text': Length must be between 1 and 75 (got 82)\nComponentValidationError: Component 'Button': Only plain_text is allowed\n</code></pre>"},{"location":"releases/#type-safety-and-editor-autocompletion","title":"Type safety and editor autocompletion","text":"<p>Full type hints throughout the codebase for better IDE support and fewer runtime errors.</p>"},{"location":"releases/#consistent-patterns","title":"Consistent patterns","text":"<p>Every component follows the same patterns - if you know how to use one, you know how to use them all.</p>"}]}